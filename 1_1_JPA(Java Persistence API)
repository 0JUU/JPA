JPA(Java Persistence API)
 : Java ORM 기술 표준

1. ORM(Object-Relational Mapping) : 객체 관계 매핑
 - 객체는 객체, RDBMS는 RDBMS대로 설계한다.


2. JPA는 애플리케이션과 JDBC 사이에서 동작한다.
 - JAVA Application <-> JPA <-> JDBC API ---SQL---> DB
                                         <-결과반환-

3. JPA 저장
           Entity Object
 - UserDAO ---Persist---> JPA <-> JDBC API ----INSERT SQL--> DB
   └-----------------JVM-----------------┘
  - JPA <-> JDBC API
   - Entity 분석 / INSERT SQL 생성 / JDBC API 사용 / 패러다임 불일치 해결


4. JPA 조회
 - UserDAO ---find(id)---> JPA <-> JDBC API ---SQL---> DB
        <---Entity Object---                <-결과반환-
   └-----------------JVM-----------------┘
  - JPA <-> JDBC API
   - SELECT SQL 생성 / JDBC API 사용 / ResultSet 매핑 / 패러다임 불일치 해결


5. JPA는 인터페이스의 모음이며, 3가지 구현체로 구성돼있다.
 - Hibernate, EclipseLink, DataNucleus


6. CRUD
 - C: jpa.persist(user)
      INSERT INTO FRUIT ...
      INSERT INTO APPLE ...
 - R: User user = jpa.find(userId)
      SELECT F.*, A.*
      FROM FRUIT F
      JOIN APPLE A ON F.FRUIT_ID = A.FRUIT_ID
 - U: user.setName("jenn")
 - D: jpa.remove(user)


7. JPA의 성능 최적화 기능
 1) 1차 캐시와 동일성(identity)을 보장
  a. 같은 트랜잭션 안에서는 같은 엔티티를 반환한다. -> 조회 성능이 조금 향상된다.
  b. DB Isolation Level이 Read Commit이어도 애플리케이션에서 Repeatable Read 보장한다.

  String userId = "0001";
  User user1 = jpa.find(User.class, userId);  // SQL
  User user2 = jpa.find(User.class, userId);  // Cache
  user1 == user2; // true  => SQL을 한 번만 실행

 2) 트랜잭션을 지원하는 쓰기 지연(transactional write-behind)
  a. 트랜잭션을 커밋할 때까지 INSERT SQL을 모은다.
  b. JDBC BATCH SQL 기능을 사용해서 한번에 SQL을 전송한다.

  #INSERT
  transaction.begin();  // 트랜잭션 시작

  em.persist(user1);
  em.persist(user2);
  em.persist(user3);
  // persis() 작성까지는 INSERT SQL을 DB에 보내지 않는다.
  // commit() 작성 시에 보낸다.

  transaction.commit();  // 트랜잭션 커밋

  c. UPDATE, DELETE로 인한 row lock 시간을 최소화한다.
  d. 트랜잭션 커밋 시 UPDATE, DELETE SQL 실행 후 바로 커밋한다.

  #UPDATE
  transaction.begin();

  changeUser(user1);
  deleteUser(user2);
  비즈니스로직();  // 이땐 row lock 없다.

  // commit() 작성 시 UPDATE, DELETE SQL 보낸다.
  transaction.commit();

 3) 지연 로딩(Lazy Loading)
  - 지연 로딩: 객체가 실제로 사용될 때 로딩한다.
    User user = userDAO.find(userId);  ---> SELECT * FROM USER;
    Team team = user.getTeam();
    String teamNm = team.getName();  ---> SELECT * FROM TEAM;

  - 즉시 로딩: JOIN SQL로 연관된 객체까지 미리 조회한다.
    User user = userDAO.find(userId);  ---> SELECT U.*, T.* FROM USER JOIN TEAM ...
    Team team = user.getTeam();
    String teamNm = team.getName();

==============================================================================

8. Database Dialog
- JPA는 특정 DB에 종속되지 않는다.
- hibernate.dialect 속성에 지정한다. (Hibernate는 40개 이상의 DB 방언 지원)


9. JPA 구동 방식
 -----------------                 -------------------------
 |  Persistence  |  ---2.생성--->  |  EntityManagerFactory  |
 -----------------                 -------------------------
         |                                     |
  1.설정정보 조회                             3.생성
         ↓                                     ↓ 
 ---------------------               -------------------
 |  METE-INF/        |               |  EntityManager  |
 |  persistence.xml  |               ------------------------
 ---------------------                    |  EntityManager  | 
                                          ----------------------- 
                                              |  EntityManager  |
                                              -------------------


10. 객체와 테이블 생성 및 매핑
- @Entity : JPA가 관리하는 객체
- @Id : 데이터베이스 PK와 매핑

 @Entity
 public class User {
  @Id
  private Long id;
  private String name;
 }


11. 주의할 점
 1) EntityManagerFactory는 하나만 생성해서 애플리케이션 전체에서 공유한다.
 2) EntityManager는 Thread 간에 공유하지 않고 사용 후 버린다.
 3) JPA의 모든 데이터 변경은 트랜잭션 내에서 실행한다.
