[양방향 매핑 시 가장 많이 하는 실수]

= Main.class =
Team team = new Team();
team.setName("DEV");
team.getUsers().add(user);  // 역방향에 연관관계 설정함.
em.persist(team);

User user = new User();
user.setUserNm("David");
em.persist(user);

em.flush();
em.clear();

Team searchTeam = em.find(Team.class, team.getId());
List<User> users = searchTeam.getUsers();

-> TEAM과 USER 모두 INSERT가 실행되지만 USER의 team_id는 null이다.
=> 왜냐? team은 주인이 아니기 때문.



Team team = new Team();
team.setName("DEV");
// team.getUsers().add(user);
em.persist(team);

User user = new User();
user.setUserNm("David");
user.setTeam(team);  // 주인에 값 설정
em.persist(user);

em.flush();
em.clear();

Team searchTeam = em.find(Team.class, team.getId());
List<User> users = searchTeam.getUsers();

=> user가 주인이므로 정상적으로 team_id가 출력된다.



그러나 실질적으로 보면 양방향으로 값이 들어가야하는 것이 맞다.

Team team = new Team();
team.setName("DEV");
// team.getUsers().add(user);
em.persist(team);

User user = new User();
user.setUserNm("David");
user.setTeam(team);  // 주인에 값 설정
em.persist(user);

team.getUsers().add(user);  // 주인 아닌 관계에도 값 설정

// em.flush();
// em.clear();

Team searchTeam = em.find(Team.class, team.getId());
List<User> users = searchTeam.getUsers();

=> em.flush();  em.clear(); 했을 경우에 정상 출력되나, 이를 주석 처리 후 실행하면 이미 Team이 1차 캐시에 올라와있으므로 조회된 데이터가 그대로 출력된다.
 => getUsers()에는 아무런 값이 없으므로 team.getUsers().add(user);와 em.flush(); em.clear()를 주석 후 실행하면 출력되는 데이터가 없다.
 => team이 컬렉션에 아무 값이 없어 순수한 객체 상태이다.


// -----------------------------------------------------------------------------

[양방향 매핑 시 주의할 점]

1. 순수 객체 상태를 고려하여 항상 양 쪽에 값을 세팅한다.
2. 연관관계 쪽에 메소드를 생성한다.
3. 양방향 매핑 시 무한 루프를 조심한다. (ex. toString(), lombok, JSON 생성 라이브러리)


= User.class =
public void setTeam(Team team) {
  this.team = team;
  team.getUsers().add(this);  // 2.
}

TIP. setTeam(Team team)보다는 changeTeam(Team team)으로 이름을 변경하여 단순 setter가 아님을 나타낸다.

= Main.class =
User user = new User();
user.setUserNm("David");
user.changeTeam(team);  // 주인에 값 설정
em.persist(user);

// team.getUsers()..addUser(user);add(user);
team.addUser(user);

-> 이때, user.changeTeam(team)과 team.addUser(user); 모두 작성돼있으면 문제가 발생할 수 있으므로 user.changeTeam(team)을 지운다.

= Team.class =
public void addUser(User user) {
  user.setTeam(this);
  users.add(user);
}

// -----------------------------------------------------------------------------

[양방향 매핑 정리]

1. 단방향 매핑만으로도 이미 연관관계 매핑은 끝났다. (처음에는 무조건 단방향으로 설계해라.)
2. 양방향 매핑은 반대 방향으로 조회 기능이 추가되는 것이다.(객체 그래프 탐색)
3. JPQL에서 역방향으로 탐색할 일이 많다.
4. 단방향 매핑을 잘 해야 하고 양방향은 필요할 때 추가하면 된다.(테이블에 영향 없다.)
5. 연관관계의 주인은 FK의 위치를 기준으로 정해야 한다.
